var index = [
{'name': 'graph', 'type': 'package', 'url': 'index.html#section-package', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'AdjacencyGraph.vertices', 'type': 'value', 'url': 'AdjacencyGraph.type.html#vertices', 'doc': '<p>All vertices of the graph.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'AdjacencyGraph.neighbors', 'type': 'function', 'url': 'AdjacencyGraph.type.html#neighbors', 'doc': '<p>All neighbor vertices of the given vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'AdjacencyGraph.forEachNeighbor', 'type': 'function', 'url': 'AdjacencyGraph.type.html#forEachNeighbor', 'doc': '<p>Apply action for each neighbor of the given vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AdjacencyGraph.degreeOf', 'type': 'function', 'url': 'AdjacencyGraph.type.html#degreeOf', 'doc': '<p>Answer the degree of the given vertex, i.e. the number of neighbors.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AdjacencyGraph.hasNeighbors', 'type': 'function', 'url': 'AdjacencyGraph.type.html#hasNeighbors', 'doc': '<p>Answer whether the given vertex has at least one neighbor.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AdjacencyGraph.containsEdge', 'type': 'function', 'url': 'AdjacencyGraph.type.html#containsEdge', 'doc': '<p>Answer whether the graph contains an edge from source to target.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AdjacencyGraph.empty', 'type': 'attribute', 'url': 'AdjacencyGraph.type.html#empty', 'doc': '<p>Answer whether the graph is empty, i.e. contains no vertices.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AdjacencyGraph.notEmpty', 'type': 'attribute', 'url': 'AdjacencyGraph.type.html#notEmpty', 'doc': '<p>Answer whether the graph is not empty, i.e. contains at least one vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AdjacencyGraph', 'type': 'interface', 'url': 'AdjacencyGraph.type.html', 'doc': '<h2>Concept</h2>\n<p>An <code><a class=\'link\' href=\'AdjacencyGraph.type.html\' title=\'Go to graph::AdjacencyGraph\'><span class=\'type-identifier\'>AdjacencyGraph</span></a></code> is a graph which is concerned only with the vertices and not with the edges.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Edge.source', 'type': 'value', 'url': 'Edge.type.html#source', 'doc': '<p>The source vertex of the edge.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Edge.target', 'type': 'value', 'url': 'Edge.type.html#target', 'doc': '<p>The target vertex of the edge.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Edge.isDirected', 'type': 'value', 'url': 'Edge.type.html#isDirected', 'doc': '<p>Whether the edge is directed.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Edge.isLoop', 'type': 'attribute', 'url': 'Edge.type.html#isLoop', 'doc': '<p>Answer whether the edge is a loop, i.e. source == target.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Edge.isLink', 'type': 'attribute', 'url': 'Edge.type.html#isLink', 'doc': '<p>Answer whether the edge is a link between two different vertices.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Edge.otherEnd', 'type': 'function', 'url': 'Edge.type.html#otherEnd', 'doc': '<p>Given one endpoint of the edge answer its other endpoint.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Edge.self', 'type': 'value', 'url': 'Edge.type.html#self', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Edge.reversed', 'type': 'value', 'url': 'Edge.type.html#reversed', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Edge.isIncident', 'type': 'function', 'url': 'Edge.type.html#isIncident', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Edge', 'type': 'interface', 'url': 'Edge.type.html', 'doc': '<p>A generic edge between two vertices of type Vertex.</p>\n', 'tags': [],'icons': ['icon-interface', 'icon-decoration-enumerated']},
{'name': 'IncidenceGraph.edges', 'type': 'value', 'url': 'IncidenceGraph.type.html#edges', 'doc': '<p>All edges of the graph.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'IncidenceGraph.adjacentEdges', 'type': 'function', 'url': 'IncidenceGraph.type.html#adjacentEdges', 'doc': '<p>The adjacent edges of the given vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'IncidenceGraph.forEachAdjacentEdge', 'type': 'function', 'url': 'IncidenceGraph.type.html#forEachAdjacentEdge', 'doc': '<p>Apply action(E) for each adjacent edge of the given vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'IncidenceGraph.neighbors', 'type': 'function', 'url': 'IncidenceGraph.type.html#neighbors', 'doc': '<p>All neighbor vertices of the given vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'IncidenceGraph.hasNeighbors', 'type': 'function', 'url': 'IncidenceGraph.type.html#hasNeighbors', 'doc': '<p>Answer whether the given vertex has at least one neighbor.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'IncidenceGraph.containsEdge', 'type': 'function', 'url': 'IncidenceGraph.type.html#containsEdge', 'doc': '<p>Answer whether the graph contains an edge from source to target.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'IncidenceGraph', 'type': 'interface', 'url': 'IncidenceGraph.type.html', 'doc': '<p>A graph with explicit edges.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'SimpleGraph.edgeConnecting', 'type': 'function', 'url': 'SimpleGraph.type.html#edgeConnecting', 'doc': '<p>Answer the edge between the given vertices if it exists.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'SimpleGraph.adjacentEdges', 'type': 'function', 'url': 'SimpleGraph.type.html#adjacentEdges', 'doc': '<p>The adjacent edges of the given vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'SimpleGraph', 'type': 'interface', 'url': 'SimpleGraph.type.html', 'doc': '<p>A <code><a class=\'link\' href=\'SimpleGraph.type.html\' title=\'Go to graph::SimpleGraph\'><span class=\'type-identifier\'>SimpleGraph</span></a></code> contains at most one undirected or two directed (but opposite) edges between any two vertices.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Walk.edges', 'type': 'value', 'url': 'Walk.type.html#edges', 'doc': '<p>The edges comprising the walk.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Walk.vertices', 'type': 'attribute', 'url': 'Walk.type.html#vertices', 'doc': '<p>The vertices touched by the walk.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.startpoint', 'type': 'attribute', 'url': 'Walk.type.html#startpoint', 'doc': '<p>The vertex where the walk starts or none if the walk is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.endpoint', 'type': 'attribute', 'url': 'Walk.type.html#endpoint', 'doc': '<p>The vertex where the walk end or none if the walk is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.length', 'type': 'attribute', 'url': 'Walk.type.html#length', 'doc': '<p>The length of the walk, i.e. the number of edges.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.distance', 'type': 'function', 'url': 'Walk.type.html#distance', 'doc': '<p>The distance of a walk with recpect to the given <code><a class=\'link\' href=\'Weights.type.html\' title=\'Go to graph::Weights\'><span class=\'type-identifier\'>Weights</span></a></code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.empty', 'type': 'attribute', 'url': 'Walk.type.html#empty', 'doc': '<p>Answer whether the walk is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.notEmpty', 'type': 'attribute', 'url': 'Walk.type.html#notEmpty', 'doc': '<p>Answer whether the walk is not empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.compare', 'type': 'function', 'url': 'Walk.type.html#compare', 'doc': '<p>Compare walks by length.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Walk', 'type': 'interface', 'url': 'Walk.type.html', 'doc': '<p>A Walk is a possibly empty sequence of edges connecting two vertices.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Weights.weight', 'type': 'function', 'url': 'Weights.type.html#weight', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Weights.zero', 'type': 'value', 'url': 'Weights.type.html#zero', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Weights', 'type': 'interface', 'url': 'Weights.type.html', 'doc': '<p><code><a class=\'link\' href=\'Weights.type.html\' title=\'Go to graph::Weights\'><span class=\'type-identifier\'>Weights</span></a></code> gives a mapping from <code><a class=\'link\' href=\'Edge.type.html\' title=\'Go to graph::Edge\'><span class=\'type-identifier\'>Edge</span></a></code>s to weights and a zero element to make <code><span class=\'type-parameter\'>Weight</span></code> a monoid.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'graph.directed', 'type': 'package', 'url': 'directed/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'DirectedEdge.isDirected', 'type': 'attribute', 'url': 'directed/DirectedEdge.type.html#isDirected', 'doc': '<p>Whether the edge is directed.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'DirectedEdge.isIncident', 'type': 'function', 'url': 'directed/DirectedEdge.type.html#isIncident', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'DirectedEdge', 'type': 'interface', 'url': 'directed/DirectedEdge.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface', 'icon-decoration-enumerated']},
{'name': 'DirectedGraph.outgoingEdgesOf', 'type': 'function', 'url': 'directed/DirectedGraph.type.html#outgoingEdgesOf', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'DirectedGraph.incomingEdgesOf', 'type': 'function', 'url': 'directed/DirectedGraph.type.html#incomingEdgesOf', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'DirectedGraph.edges', 'type': 'attribute', 'url': 'directed/DirectedGraph.type.html#edges', 'doc': '<p>All edges of the graph.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'DirectedGraph', 'type': 'interface', 'url': 'directed/DirectedGraph.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'graph.multigraph', 'type': 'package', 'url': 'multigraph/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'Multigraph.edgesConnecting', 'type': 'function', 'url': 'multigraph/Multigraph.type.html#edgesConnecting', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Multigraph.occurrencesOfEdge', 'type': 'function', 'url': 'multigraph/Multigraph.type.html#occurrencesOfEdge', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Multigraph', 'type': 'interface', 'url': 'multigraph/Multigraph.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'graph.traversal', 'type': 'package', 'url': 'traversal/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'GraphTraversal.graph', 'type': 'value', 'url': 'traversal/GraphTraversal.type.html#graph', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphTraversal.start', 'type': 'value', 'url': 'traversal/GraphTraversal.type.html#start', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphTraversal.visitor', 'type': 'value', 'url': 'traversal/GraphTraversal.type.html#visitor', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphTraversal.graphIterator', 'type': 'function', 'url': 'traversal/GraphTraversal.type.html#graphIterator', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphTraversal.iterator', 'type': 'function', 'url': 'traversal/GraphTraversal.type.html#iterator', 'doc': '<p>An iterator for the elements belonging to this stream.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'GraphTraversal.vertices', 'type': 'attribute', 'url': 'traversal/GraphTraversal.type.html#vertices', 'doc': '<p>Answer the vertices of the <code>graph</code> reached by this traversal starting by <code>start</code> in traversal order.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'GraphTraversal', 'type': 'interface', 'url': 'traversal/GraphTraversal.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'VertexTraversal', 'type': 'interface', 'url': 'traversal/VertexTraversal.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'EdgeTraversal', 'type': 'interface', 'url': 'traversal/EdgeTraversal.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'graph.traversal.iterator', 'type': 'package', 'url': 'traversal/iterator/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'BfsIterator.push', 'type': 'function', 'url': 'traversal/iterator/BfsIterator.type.html#push', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'BfsIterator.nextVertex', 'type': 'function', 'url': 'traversal/iterator/BfsIterator.type.html#nextVertex', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'BfsIterator', 'type': 'class', 'url': 'traversal/iterator/BfsIterator.type.html', 'doc': '<p>Generic breadth first search traversal.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'VisitColor', 'type': 'class', 'url': 'traversal/iterator/VisitColor.type.html', 'doc': '<p>Vertex visit state is encoded by color.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract', 'icon-decoration-enumerated']},
{'name': 'white', 'type': 'object', 'url': 'traversal/iterator/white.object.html', 'doc': '<p>white = vertex has not been visited yet</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'white', 'type': 'value', 'url': 'traversal/iterator/index.html#white', 'doc': '<p>white = vertex has not been visited yet</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'gray', 'type': 'object', 'url': 'traversal/iterator/gray.object.html', 'doc': '<p>gray = vertex has been visited but we are not done with all of its out-edges yet</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'gray', 'type': 'value', 'url': 'traversal/iterator/index.html#gray', 'doc': '<p>gray = vertex has been visited but we are not done with all of its out-edges yet</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'black', 'type': 'object', 'url': 'traversal/iterator/black.object.html', 'doc': '<p>black = vertex has been visited and we are not done with all of its out-edges</p>\n', 'tags': [],'icons': ['icon-object']},
{'name': 'black', 'type': 'value', 'url': 'traversal/iterator/index.html#black', 'doc': '<p>black = vertex has been visited and we are not done with all of its out-edges</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ColorMap.clear', 'type': 'function', 'url': 'traversal/iterator/ColorMap.type.html#clear', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ColorMap.getColor', 'type': 'function', 'url': 'traversal/iterator/ColorMap.type.html#getColor', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ColorMap.setColor', 'type': 'function', 'url': 'traversal/iterator/ColorMap.type.html#setColor', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'ColorMap', 'type': 'class', 'url': 'traversal/iterator/ColorMap.type.html', 'doc': '<p>A ColorMap stores the visit state of vertices.</p>\n', 'tags': [],'icons': ['icon-class']},
{'name': 'DfsIterator.push', 'type': 'function', 'url': 'traversal/iterator/DfsIterator.type.html#push', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'DfsIterator.nextVertex', 'type': 'function', 'url': 'traversal/iterator/DfsIterator.type.html#nextVertex', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'DfsIterator', 'type': 'class', 'url': 'traversal/iterator/DfsIterator.type.html', 'doc': '<p>Generic depth first search traversal.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'GraphIterator.graph', 'type': 'value', 'url': 'traversal/iterator/GraphIterator.type.html#graph', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphIterator.visitor', 'type': 'value', 'url': 'traversal/iterator/GraphIterator.type.html#visitor', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphIterator.startWith', 'type': 'function', 'url': 'traversal/iterator/GraphIterator.type.html#startWith', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphIterator', 'type': 'interface', 'url': 'traversal/iterator/GraphIterator.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'PropagatorBasedIterator.Propagator', 'type': 'alias', 'url': 'traversal/iterator/PropagatorBasedIterator.type.html#Propagator', 'doc': '', 'tags': [],'icons': ['icon-type-alias']},
{'name': 'PropagatorBasedIterator.propagatorFor', 'type': 'function', 'url': 'traversal/iterator/PropagatorBasedIterator.type.html#propagatorFor', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'PropagatorBasedIterator', 'type': 'interface', 'url': 'traversal/iterator/PropagatorBasedIterator.type.html', 'doc': '<p>Graph iterator using a <code><a class=\'link\' href=\'traversal/propagator/GraphPropagator.type.html\' title=\'Go to graph.traversal.propagator::GraphPropagator\'><span class=\'type-identifier\'>GraphPropagator</span></a></code> to abstract from propagating to neighbors via adjacent vertices\nor incident…</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'VertexIterator.propagatorFor', 'type': 'function', 'url': 'traversal/iterator/VertexIterator.type.html#propagatorFor', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'VertexIterator', 'type': 'interface', 'url': 'traversal/iterator/VertexIterator.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'EdgeIterator.propagatorFor', 'type': 'function', 'url': 'traversal/iterator/EdgeIterator.type.html#propagatorFor', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'EdgeIterator', 'type': 'interface', 'url': 'traversal/iterator/EdgeIterator.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'StandardGraphIterator.next', 'type': 'function', 'url': 'traversal/iterator/StandardGraphIterator.type.html#next', 'doc': '<p>The next element, or <span class=\'link-unresolvable\'><code>finished</code></span> if there are no more\nelements to be iterated.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'StandardGraphIterator.startWith', 'type': 'function', 'url': 'traversal/iterator/StandardGraphIterator.type.html#startWith', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'StandardGraphIterator.push', 'type': 'function', 'url': 'traversal/iterator/StandardGraphIterator.type.html#push', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'StandardGraphIterator.nextVertex', 'type': 'function', 'url': 'traversal/iterator/StandardGraphIterator.type.html#nextVertex', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'StandardGraphIterator', 'type': 'class', 'url': 'traversal/iterator/StandardGraphIterator.type.html', 'doc': '<p>Generic traversal by using white/gray/black vertex colors and a collection of vertices waiting to be visited.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'graph.traversal.propagator', 'type': 'package', 'url': 'traversal/propagator/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'EdgePropagator.adjacencies', 'type': 'attribute', 'url': 'traversal/propagator/EdgePropagator.type.html#adjacencies', 'doc': '<p>Answer the adjacencies allowing access to the neighboring vertices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'EdgePropagator.target', 'type': 'function', 'url': 'traversal/propagator/EdgePropagator.type.html#target', 'doc': '<p>Answer the target vertex reached by an adjacency.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'EdgePropagator.backEdge', 'type': 'function', 'url': 'traversal/propagator/EdgePropagator.type.html#backEdge', 'doc': '<p>Calls visitor.backEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'EdgePropagator.examineEdge', 'type': 'function', 'url': 'traversal/propagator/EdgePropagator.type.html#examineEdge', 'doc': '<p>Calls visitor.examineEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'EdgePropagator.forwardEdge', 'type': 'function', 'url': 'traversal/propagator/EdgePropagator.type.html#forwardEdge', 'doc': '<p>Calls visitor.forwardEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'EdgePropagator.nonTreeEdge', 'type': 'function', 'url': 'traversal/propagator/EdgePropagator.type.html#nonTreeEdge', 'doc': '<p>Calls visitor.nonTreeEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'EdgePropagator.treeEdge', 'type': 'function', 'url': 'traversal/propagator/EdgePropagator.type.html#treeEdge', 'doc': '<p>Calls visitor.treeEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'EdgePropagator', 'type': 'class', 'url': 'traversal/propagator/EdgePropagator.type.html', 'doc': '', 'tags': [],'icons': ['icon-class']},
{'name': 'EdgePropagatorFactory.propagator', 'type': 'function', 'url': 'traversal/propagator/EdgePropagatorFactory.type.html#propagator', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'EdgePropagatorFactory', 'type': 'class', 'url': 'traversal/propagator/EdgePropagatorFactory.type.html', 'doc': '', 'tags': [],'icons': ['icon-class']},
{'name': 'GraphPropagator.adjacencies', 'type': 'value', 'url': 'traversal/propagator/GraphPropagator.type.html#adjacencies', 'doc': '<p>Answer the adjacencies allowing access to the neighboring vertices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphPropagator.target', 'type': 'function', 'url': 'traversal/propagator/GraphPropagator.type.html#target', 'doc': '<p>Answer the target vertex reached by an adjacency.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphPropagator.examineVertex', 'type': 'function', 'url': 'traversal/propagator/GraphPropagator.type.html#examineVertex', 'doc': '<p>Calls visitor.examineVertex(source).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'GraphPropagator.discoverVertex', 'type': 'function', 'url': 'traversal/propagator/GraphPropagator.type.html#discoverVertex', 'doc': '<p>Calls visitor.discoverVertex(source).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'GraphPropagator.finishVertex', 'type': 'function', 'url': 'traversal/propagator/GraphPropagator.type.html#finishVertex', 'doc': '<p>Calls visitor.finishVertex(source).</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'GraphPropagator.examineEdge', 'type': 'function', 'url': 'traversal/propagator/GraphPropagator.type.html#examineEdge', 'doc': '<p>Calls visitor.examineEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphPropagator.treeEdge', 'type': 'function', 'url': 'traversal/propagator/GraphPropagator.type.html#treeEdge', 'doc': '<p>Calls visitor.treeEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphPropagator.nonTreeEdge', 'type': 'function', 'url': 'traversal/propagator/GraphPropagator.type.html#nonTreeEdge', 'doc': '<p>Calls visitor.nonTreeEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphPropagator.backEdge', 'type': 'function', 'url': 'traversal/propagator/GraphPropagator.type.html#backEdge', 'doc': '<p>Calls visitor.backEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphPropagator.forwardEdge', 'type': 'function', 'url': 'traversal/propagator/GraphPropagator.type.html#forwardEdge', 'doc': '<p>Calls visitor.forwardEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'GraphPropagator', 'type': 'class', 'url': 'traversal/propagator/GraphPropagator.type.html', 'doc': '<p>A <code><a class=\'link\' href=\'traversal/propagator/GraphPropagator.type.html\' title=\'Go to graph.traversal.propagator::GraphPropagator\'><span class=\'type-identifier\'>GraphPropagator</span></a></code> defines how a graph traversal propagates to adjacent vertices of a given vertex.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'PropagatorFactory.propagator', 'type': 'function', 'url': 'traversal/propagator/PropagatorFactory.type.html#propagator', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'PropagatorFactory', 'type': 'class', 'url': 'traversal/propagator/PropagatorFactory.type.html', 'doc': '', 'tags': [],'icons': ['icon-class', 'icon-decoration-abstract']},
{'name': 'VertexPropagator.adjacencies', 'type': 'attribute', 'url': 'traversal/propagator/VertexPropagator.type.html#adjacencies', 'doc': '<p>Answer the adjacencies allowing access to the neighboring vertices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'VertexPropagator.target', 'type': 'function', 'url': 'traversal/propagator/VertexPropagator.type.html#target', 'doc': '<p>Answer the target vertex reached by an adjacency.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'VertexPropagator.backEdge', 'type': 'function', 'url': 'traversal/propagator/VertexPropagator.type.html#backEdge', 'doc': '<p>Calls visitor.backEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'VertexPropagator.examineEdge', 'type': 'function', 'url': 'traversal/propagator/VertexPropagator.type.html#examineEdge', 'doc': '<p>Calls visitor.examineEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'VertexPropagator.forwardEdge', 'type': 'function', 'url': 'traversal/propagator/VertexPropagator.type.html#forwardEdge', 'doc': '<p>Calls visitor.forwardEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'VertexPropagator.nonTreeEdge', 'type': 'function', 'url': 'traversal/propagator/VertexPropagator.type.html#nonTreeEdge', 'doc': '<p>Calls visitor.nonTreeEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'VertexPropagator.treeEdge', 'type': 'function', 'url': 'traversal/propagator/VertexPropagator.type.html#treeEdge', 'doc': '<p>Calls visitor.treeEdge according to the approprate signature of the visitor\'s method.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'VertexPropagator', 'type': 'class', 'url': 'traversal/propagator/VertexPropagator.type.html', 'doc': '', 'tags': [],'icons': ['icon-class']},
{'name': 'VertexPropagatorFactory.propagator', 'type': 'function', 'url': 'traversal/propagator/VertexPropagatorFactory.type.html#propagator', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'VertexPropagatorFactory', 'type': 'class', 'url': 'traversal/propagator/VertexPropagatorFactory.type.html', 'doc': '', 'tags': [],'icons': ['icon-class']},
{'name': 'graph.traversal.visitor', 'type': 'package', 'url': 'traversal/visitor/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'GraphVisitor.examineVertex', 'type': 'function', 'url': 'traversal/visitor/GraphVisitor.type.html#examineVertex', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'GraphVisitor.discoverVertex', 'type': 'function', 'url': 'traversal/visitor/GraphVisitor.type.html#discoverVertex', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'GraphVisitor.finishVertex', 'type': 'function', 'url': 'traversal/visitor/GraphVisitor.type.html#finishVertex', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'GraphVisitor', 'type': 'interface', 'url': 'traversal/visitor/GraphVisitor.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'VertexVisitor.examineEdge', 'type': 'function', 'url': 'traversal/visitor/VertexVisitor.type.html#examineEdge', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'VertexVisitor.treeEdge', 'type': 'function', 'url': 'traversal/visitor/VertexVisitor.type.html#treeEdge', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'VertexVisitor.nonTreeEdge', 'type': 'function', 'url': 'traversal/visitor/VertexVisitor.type.html#nonTreeEdge', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'VertexVisitor.backEdge', 'type': 'function', 'url': 'traversal/visitor/VertexVisitor.type.html#backEdge', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'VertexVisitor.forwardEdge', 'type': 'function', 'url': 'traversal/visitor/VertexVisitor.type.html#forwardEdge', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'VertexVisitor', 'type': 'interface', 'url': 'traversal/visitor/VertexVisitor.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'EdgeVisitor.examineEdge', 'type': 'function', 'url': 'traversal/visitor/EdgeVisitor.type.html#examineEdge', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'EdgeVisitor.treeEdge', 'type': 'function', 'url': 'traversal/visitor/EdgeVisitor.type.html#treeEdge', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'EdgeVisitor.nonTreeEdge', 'type': 'function', 'url': 'traversal/visitor/EdgeVisitor.type.html#nonTreeEdge', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'EdgeVisitor.backEdge', 'type': 'function', 'url': 'traversal/visitor/EdgeVisitor.type.html#backEdge', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'EdgeVisitor.forwardEdge', 'type': 'function', 'url': 'traversal/visitor/EdgeVisitor.type.html#forwardEdge', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'EdgeVisitor', 'type': 'interface', 'url': 'traversal/visitor/EdgeVisitor.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'nullVertexVisitor', 'type': 'function', 'url': 'traversal/visitor/index.html#nullVertexVisitor', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'nullEdgeVisitor', 'type': 'function', 'url': 'traversal/visitor/index.html#nullEdgeVisitor', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'graph.undirected', 'type': 'package', 'url': 'undirected/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'UndirectedEdge.isDirected', 'type': 'attribute', 'url': 'undirected/UndirectedEdge.type.html#isDirected', 'doc': '<p>Whether the edge is directed.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'UndirectedEdge.isIncident', 'type': 'function', 'url': 'undirected/UndirectedEdge.type.html#isIncident', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'UndirectedEdge.asOutgoing', 'type': 'function', 'url': 'undirected/UndirectedEdge.type.html#asOutgoing', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'UndirectedEdge', 'type': 'interface', 'url': 'undirected/UndirectedEdge.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface', 'icon-decoration-enumerated']},
{'name': 'UndirectedGraph.outgoingEdgesOf', 'type': 'function', 'url': 'undirected/UndirectedGraph.type.html#outgoingEdgesOf', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'UndirectedGraph.incomingEdgesOf', 'type': 'function', 'url': 'undirected/UndirectedGraph.type.html#incomingEdgesOf', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'UndirectedGraph.edges', 'type': 'attribute', 'url': 'undirected/UndirectedGraph.type.html#edges', 'doc': '<p>All edges of the graph.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'UndirectedGraph', 'type': 'interface', 'url': 'undirected/UndirectedGraph.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'graph', 'type': 'module', 'url': 'index.html', 'doc': '', 'tags': [],'icons': []}];
var tagIndex = [
];
