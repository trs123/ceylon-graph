var index = [
{'name': 'graph', 'type': 'package', 'url': 'index.html#section-package', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'AdjacencyGraph.vertices', 'type': 'value', 'url': 'AdjacencyGraph.type.html#vertices', 'doc': '<p>All vertices of the graph.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'AdjacencyGraph.neighbors', 'type': 'function', 'url': 'AdjacencyGraph.type.html#neighbors', 'doc': '<p>All neighbor vertices of the given vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'AdjacencyGraph.forEachNeighbor', 'type': 'function', 'url': 'AdjacencyGraph.type.html#forEachNeighbor', 'doc': '<p>Apply action for each neighbor of the given vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AdjacencyGraph.degreeOf', 'type': 'function', 'url': 'AdjacencyGraph.type.html#degreeOf', 'doc': '<p>Answer the degree of the given vertex, i.e. the number of neighbors.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AdjacencyGraph.hasNeighbors', 'type': 'function', 'url': 'AdjacencyGraph.type.html#hasNeighbors', 'doc': '<p>Answer whether the given vertex has at least one neighbor.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AdjacencyGraph.containsEdge', 'type': 'function', 'url': 'AdjacencyGraph.type.html#containsEdge', 'doc': '<p>Answer whether the graph contains an edge from source to target.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AdjacencyGraph.empty', 'type': 'attribute', 'url': 'AdjacencyGraph.type.html#empty', 'doc': '<p>Answer whether the graph is empty, i.e. contains no vertices.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AdjacencyGraph.notEmpty', 'type': 'attribute', 'url': 'AdjacencyGraph.type.html#notEmpty', 'doc': '<p>Answer whether the graph is not empty, i.e. contains at least one vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'AdjacencyGraph', 'type': 'interface', 'url': 'AdjacencyGraph.type.html', 'doc': '<h2>Concept</h2>\n<p>An <code><a class=\'link\' href=\'AdjacencyGraph.type.html\' title=\'Go to graph::AdjacencyGraph\'><span class=\'type-identifier\'>AdjacencyGraph</span></a></code> is a graph which is concerned only with the vertices and not with the edges.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Edge.source', 'type': 'value', 'url': 'Edge.type.html#source', 'doc': '<p>The source vertex of the edge.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Edge.target', 'type': 'value', 'url': 'Edge.type.html#target', 'doc': '<p>The target vertex of the edge.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Edge.isDirected', 'type': 'value', 'url': 'Edge.type.html#isDirected', 'doc': '<p>Whether the edge is directed.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Edge.isLoop', 'type': 'attribute', 'url': 'Edge.type.html#isLoop', 'doc': '<p>Answer whether the edge is a loop, i.e. source == target.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Edge.isLink', 'type': 'attribute', 'url': 'Edge.type.html#isLink', 'doc': '<p>Answer whether the edge is a link between two different vertices.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Edge.otherEnd', 'type': 'function', 'url': 'Edge.type.html#otherEnd', 'doc': '<p>Given one endpoint of the edge answer its other endpoint.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Edge.reversed', 'type': 'value', 'url': 'Edge.type.html#reversed', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Edge.isIncident', 'type': 'function', 'url': 'Edge.type.html#isIncident', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Edge', 'type': 'interface', 'url': 'Edge.type.html', 'doc': '<p>A generic edge between two vertices of type Vertex.</p>\n', 'tags': [],'icons': ['icon-interface', 'icon-decoration-enumerated']},
{'name': 'IncidenceGraph.edges', 'type': 'value', 'url': 'IncidenceGraph.type.html#edges', 'doc': '<p>All edges of the graph.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'IncidenceGraph.adjacentEdges', 'type': 'function', 'url': 'IncidenceGraph.type.html#adjacentEdges', 'doc': '<p>The adjacent edges of the given vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'IncidenceGraph.forEachAdjacentEdge', 'type': 'function', 'url': 'IncidenceGraph.type.html#forEachAdjacentEdge', 'doc': '<p>Apply action(E) for each adjacent edge of the given vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'IncidenceGraph.neighbors', 'type': 'function', 'url': 'IncidenceGraph.type.html#neighbors', 'doc': '<p>All neighbor vertices of the given vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'IncidenceGraph.hasNeighbors', 'type': 'function', 'url': 'IncidenceGraph.type.html#hasNeighbors', 'doc': '<p>Answer whether the given vertex has at least one neighbor.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'IncidenceGraph.containsEdge', 'type': 'function', 'url': 'IncidenceGraph.type.html#containsEdge', 'doc': '<p>Answer whether the graph contains an edge from source to target.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'IncidenceGraph', 'type': 'interface', 'url': 'IncidenceGraph.type.html', 'doc': '<p>A graph with explicit edges.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'run', 'type': 'function', 'url': 'index.html#run', 'doc': '<p>Run the module <code>graph</code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'SimpleGraph.edgeConnecting', 'type': 'function', 'url': 'SimpleGraph.type.html#edgeConnecting', 'doc': '<p>Answer the edge between the given vertices if it exists.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'SimpleGraph.adjacentEdges', 'type': 'function', 'url': 'SimpleGraph.type.html#adjacentEdges', 'doc': '<p>The adjacent edges of the given vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-over']},
{'name': 'SimpleGraph', 'type': 'interface', 'url': 'SimpleGraph.type.html', 'doc': '<p>A <code><a class=\'link\' href=\'SimpleGraph.type.html\' title=\'Go to graph::SimpleGraph\'><span class=\'type-identifier\'>SimpleGraph</span></a></code> contains at most one undirected or two directed (but opposite) edges between any two vertices.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Walk.edges', 'type': 'value', 'url': 'Walk.type.html#edges', 'doc': '<p>The edges comprising the walk.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Walk.vertices', 'type': 'attribute', 'url': 'Walk.type.html#vertices', 'doc': '<p>The vertices touched by the walk.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.startpoint', 'type': 'attribute', 'url': 'Walk.type.html#startpoint', 'doc': '<p>The vertex where the walk starts or none if the walk is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.endpoint', 'type': 'attribute', 'url': 'Walk.type.html#endpoint', 'doc': '<p>The vertex where the walk end or none if the walk is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.length', 'type': 'attribute', 'url': 'Walk.type.html#length', 'doc': '<p>The length of the walk, i.e. the number of edges.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.distance', 'type': 'function', 'url': 'Walk.type.html#distance', 'doc': '<p>The distance of a walk with recpect to the given <code><a class=\'link\' href=\'Weights.type.html\' title=\'Go to graph::Weights\'><span class=\'type-identifier\'>Weights</span></a></code>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.empty', 'type': 'attribute', 'url': 'Walk.type.html#empty', 'doc': '<p>Answer whether the walk is empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.notEmpty', 'type': 'attribute', 'url': 'Walk.type.html#notEmpty', 'doc': '<p>Answer whether the walk is not empty.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Walk.compare', 'type': 'function', 'url': 'Walk.type.html#compare', 'doc': '<p>Compare walks by length.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Walk', 'type': 'interface', 'url': 'Walk.type.html', 'doc': '<p>A Walk is a possibly empty sequence of edges connecting two vertices.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'Weights.weight', 'type': 'function', 'url': 'Weights.type.html#weight', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Weights.zero', 'type': 'value', 'url': 'Weights.type.html#zero', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Weights', 'type': 'interface', 'url': 'Weights.type.html', 'doc': '<p><code><a class=\'link\' href=\'Weights.type.html\' title=\'Go to graph::Weights\'><span class=\'type-identifier\'>Weights</span></a></code> gives a mapping from <code><a class=\'link\' href=\'Edge.type.html\' title=\'Go to graph::Edge\'><span class=\'type-identifier\'>Edge</span></a></code>s to weights and a zero element to make <code><span class=\'type-parameter\'>Weight</span></code> a monoid.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'graph.directed', 'type': 'package', 'url': 'directed/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'DirectedEdge.isDirected', 'type': 'attribute', 'url': 'directed/DirectedEdge.type.html#isDirected', 'doc': '<p>Whether the edge is directed.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'DirectedEdge.isIncident', 'type': 'function', 'url': 'directed/DirectedEdge.type.html#isIncident', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'DirectedEdge', 'type': 'interface', 'url': 'directed/DirectedEdge.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface', 'icon-decoration-enumerated']},
{'name': 'DirectedGraph.outgoingEdgesOf', 'type': 'function', 'url': 'directed/DirectedGraph.type.html#outgoingEdgesOf', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'DirectedGraph.incomingEdgesOf', 'type': 'function', 'url': 'directed/DirectedGraph.type.html#incomingEdgesOf', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'DirectedGraph.edges', 'type': 'attribute', 'url': 'directed/DirectedGraph.type.html#edges', 'doc': '<p>All edges of the graph.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'DirectedGraph', 'type': 'interface', 'url': 'directed/DirectedGraph.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'graph.example.cycle', 'type': 'package', 'url': 'example/cycle/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'Link.reversed', 'type': 'attribute', 'url': 'example/cycle/Cycle.Link.type.html#reversed', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Link', 'type': 'class', 'url': 'example/cycle/Cycle.Link.type.html', 'doc': '', 'tags': [],'icons': ['icon-class', 'icon-decoration-final']},
{'name': 'Cycle.edgeConnecting', 'type': 'function', 'url': 'example/cycle/Cycle.type.html#edgeConnecting', 'doc': '<p>Answer the edge between the given vertices if it exists.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Cycle.neighbors', 'type': 'function', 'url': 'example/cycle/Cycle.type.html#neighbors', 'doc': '<p>All neighbor vertices of the given vertex.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Cycle.vertices', 'type': 'attribute', 'url': 'example/cycle/Cycle.type.html#vertices', 'doc': '<p>All vertices of the graph.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Cycle', 'type': 'class', 'url': 'example/cycle/Cycle.type.html', 'doc': '', 'tags': [],'icons': ['icon-class', 'icon-decoration-final']},
{'name': 'graph.example.routemap', 'type': 'package', 'url': 'example/routemap/index.html', 'doc': '<p>This package contains an example for a <a class=\'link-custom-text\' href=\'multigraph/Multigraph.type.html\' title=\'Go to graph.multigraph::Multigraph\'>multigraph</a> representing a route map for…</p>\n', 'tags': [],'icons': ['icon-package']},
{'name': 'Distance.plus', 'type': 'function', 'url': 'example/routemap/Distance.type.html#plus', 'doc': '<p>The result of adding the given value to this value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Distance', 'type': 'class', 'url': 'example/routemap/Distance.type.html', 'doc': '<p>Distance measured in km.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-final']},
{'name': 'Duration.plus', 'type': 'function', 'url': 'example/routemap/Duration.type.html#plus', 'doc': '<p>The result of adding the given value to this value.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Duration', 'type': 'class', 'url': 'example/routemap/Duration.type.html', 'doc': '<p>Duration measured in hours.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-final']},
{'name': 'City', 'type': 'class', 'url': 'example/routemap/City.type.html', 'doc': '<p>A city.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-final']},
{'name': 'Route.reversed', 'type': 'attribute', 'url': 'example/routemap/Route.type.html#reversed', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Route', 'type': 'class', 'url': 'example/routemap/Route.type.html', 'doc': '<p>A route between two cities.</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-final']},
{'name': 'RouteMap.edges', 'type': 'attribute', 'url': 'example/routemap/RouteMap.type.html#edges', 'doc': '<p>All edges of the graph.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'RouteMap.vertices', 'type': 'attribute', 'url': 'example/routemap/RouteMap.type.html#vertices', 'doc': '<p>All vertices of the graph.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'distances.weight', 'type': 'function', 'url': 'example/routemap/RouteMap.distances.object.html#weight', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'distances.zero', 'type': 'attribute', 'url': 'example/routemap/RouteMap.distances.object.html#zero', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'distances', 'type': 'object', 'url': 'example/routemap/RouteMap.distances.object.html', 'doc': '', 'tags': [],'icons': ['icon-object']},
{'name': 'RouteMap.distances', 'type': 'value', 'url': 'example/routemap/RouteMap.type.html#distances', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'travelTimes.weight', 'type': 'function', 'url': 'example/routemap/RouteMap.travelTimes.object.html#weight', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'travelTimes.zero', 'type': 'attribute', 'url': 'example/routemap/RouteMap.travelTimes.object.html#zero', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'travelTimes', 'type': 'object', 'url': 'example/routemap/RouteMap.travelTimes.object.html', 'doc': '', 'tags': [],'icons': ['icon-object']},
{'name': 'RouteMap.travelTimes', 'type': 'value', 'url': 'example/routemap/RouteMap.type.html#travelTimes', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'RouteMap.edgesConnecting', 'type': 'function', 'url': 'example/routemap/RouteMap.type.html#edgesConnecting', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'RouteMap', 'type': 'class', 'url': 'example/routemap/RouteMap.type.html', 'doc': '<p>A route map of <a class=\'link-custom-text\' href=\'example/routemap/City.type.html\' title=\'Go to graph.example.routemap::City\'>cities</a> connected by undirected <a class=\'link-custom-text\' href=\'example/routemap/Route.type.html\' title=\'Go to graph.example.routemap::Route\'>routes</a> with a given <a class=\'link-custom-text\' href=\'example/routemap/Distance.type.html\' title=\'Go to graph.example.routemap::Distance\'>distance</a>\nand [[travel…</p>\n', 'tags': [],'icons': ['icon-class', 'icon-decoration-final']},
{'name': 'printPathInfo', 'type': 'function', 'url': 'example/routemap/index.html#printPathInfo', 'doc': '<p>Example code demonstrating how to calculate different distances on a path or <a class=\'link-custom-text\' href=\'Walk.type.html\' title=\'Go to graph::Walk\'>walk</a>.</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'graph.multigraph', 'type': 'package', 'url': 'multigraph/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'Multigraph.edgesConnecting', 'type': 'function', 'url': 'multigraph/Multigraph.type.html#edgesConnecting', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Multigraph.occurrencesOfEdge', 'type': 'function', 'url': 'multigraph/Multigraph.type.html#occurrencesOfEdge', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'Multigraph', 'type': 'interface', 'url': 'multigraph/Multigraph.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'graph.traversal', 'type': 'package', 'url': 'traversal/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'EdgePropagator.adjacentItems', 'type': 'function', 'url': 'traversal/EdgePropagator.type.html#adjacentItems', 'doc': '<p>Answer the items allowing access to the neighboring vertices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'EdgePropagator.target', 'type': 'function', 'url': 'traversal/EdgePropagator.type.html#target', 'doc': '<p>Answer the target vertex reached by an item.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'EdgePropagator', 'type': 'class', 'url': 'traversal/EdgePropagator.type.html', 'doc': '', 'tags': [],'icons': ['icon-class']},
{'name': 'Propagator.adjacentItems', 'type': 'function', 'url': 'traversal/Propagator.type.html#adjacentItems', 'doc': '<p>Answer the items allowing access to the neighboring vertices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Propagator.target', 'type': 'function', 'url': 'traversal/Propagator.type.html#target', 'doc': '<p>Answer the target vertex reached by an item.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-formal']},
{'name': 'Propagator', 'type': 'interface', 'url': 'traversal/Propagator.type.html', 'doc': '<p>A <code><a class=\'link\' href=\'traversal/Propagator.type.html\' title=\'Go to graph.traversal::Propagator\'><span class=\'type-identifier\'>Propagator</span></a></code> defines how a graph traversal propagates to adjacent vertices of a given vertex.</p>\n', 'tags': [],'icons': ['icon-interface']},
{'name': 'GraphIterator', 'type': 'interface', 'url': 'traversal/GraphIterator.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'Traversal.iterator', 'type': 'function', 'url': 'traversal/Traversal.type.html#iterator', 'doc': '<p>An iterator for the elements belonging to this stream.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'Traversal', 'type': 'class', 'url': 'traversal/Traversal.type.html', 'doc': '', 'tags': [],'icons': ['icon-class']},
{'name': 'edgeTraversal', 'type': 'function', 'url': 'traversal/index.html#edgeTraversal', 'doc': '<p>Work in progress!!</p>\n', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'VertexPropagator.adjacentItems', 'type': 'function', 'url': 'traversal/VertexPropagator.type.html#adjacentItems', 'doc': '<p>Answer the items allowing access to the neighboring vertices.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'VertexPropagator.target', 'type': 'function', 'url': 'traversal/VertexPropagator.type.html#target', 'doc': '<p>Answer the target vertex reached by an item.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'VertexPropagator', 'type': 'class', 'url': 'traversal/VertexPropagator.type.html', 'doc': '', 'tags': [],'icons': ['icon-class']},
{'name': 'graph.undirected', 'type': 'package', 'url': 'undirected/index.html', 'doc': '', 'tags': [],'icons': ['icon-package']},
{'name': 'UndirectedEdge.isDirected', 'type': 'attribute', 'url': 'undirected/UndirectedEdge.type.html#isDirected', 'doc': '<p>Whether the edge is directed.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'UndirectedEdge.isIncident', 'type': 'function', 'url': 'undirected/UndirectedEdge.type.html#isIncident', 'doc': '', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'UndirectedEdge', 'type': 'interface', 'url': 'undirected/UndirectedEdge.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface', 'icon-decoration-enumerated']},
{'name': 'UndirectedGraph.outgoingEdgesOf', 'type': 'function', 'url': 'undirected/UndirectedGraph.type.html#outgoingEdgesOf', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'UndirectedGraph.incomingEdgesOf', 'type': 'function', 'url': 'undirected/UndirectedGraph.type.html#incomingEdgesOf', 'doc': '', 'tags': [],'icons': ['icon-shared-member']},
{'name': 'UndirectedGraph.edges', 'type': 'attribute', 'url': 'undirected/UndirectedGraph.type.html#edges', 'doc': '<p>All edges of the graph.</p>\n', 'tags': [],'icons': ['icon-shared-member', 'icon-decoration-impl']},
{'name': 'UndirectedGraph', 'type': 'interface', 'url': 'undirected/UndirectedGraph.type.html', 'doc': '', 'tags': [],'icons': ['icon-interface']},
{'name': 'graph', 'type': 'module', 'url': 'index.html', 'doc': '', 'tags': [],'icons': []}];
var tagIndex = [
];
